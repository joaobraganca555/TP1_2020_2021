/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TP1_2020_2021;

import base.Address;
import base.Customer;
import base.Person;
import order.base.OrderStatus;
import order.exceptions.ContainerException;
import order.exceptions.OrderException;
import order.exceptions.PositionException;
import order.packing.Color;
import order.shippingorder.ShippingOrder;
import org.junit.jupiter.api.Test;
import packing.Container;
import packing.Item;
import packing.Position;
import shippingorder.IShippingOrder;

import static org.junit.jupiter.api.Assertions.*;

class TestCases {

    /**
     * tc1 is used for testing
     * ECP1 (The item canÂ´t exist in the collection, and container shouldn't be closed)
     */
    @Test
    void tc1_ecp1_testeAdicionarItem() {

        try {
            Container cont1 = new Container("cont1",20,10,10);
            Item item1 = new Item(5,2,2,"item1","");
            Position pos1 = new Position(1,1,1);

            assertTrue(cont1.addItem(item1, pos1, Color.aqua),"Item added with success!");

        } catch (PositionException | ContainerException e) {}

    }

    @Test
    void tc2_ecp2_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10);
            cont1.close();
            Item item1 = new Item(5,2,2,"item1","");
            Position pos1 = new Position(1,1,1);

            assertThrows(ContainerException.class, () -> cont1.addItem(item1, pos1, Color.aqua),"Can't add item, container is closed!");

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc3_ecp3_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,3);

            Item item1 = new Item(5,2,2,"item1","");
            Item item2 = new Item(3,2,1,"item2","");
            Item item3 = new Item(5,3,6,"item3","");
            Item item4 = new Item(4,1,2,"item4","");
            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(2,2,2);
            Position pos3 = new Position(3,3,3);
            Position pos4 = new Position(4,4,4);
            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);
            cont1.addItem(item3, pos3, Color.black);

            assertTrue(cont1.addItem(item4, pos4, Color.gray));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc4_ecp4_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,3);

            Item item1 = new Item(2,2,2,"item1","");
            Item item2 = new Item(2,2,2,"item2","");
            Item item3 = new Item(5,3,6,"item3","");
            Item item4 = new Item(4,1,2,"item4","");
            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(2,2,2);
            Position pos3 = new Position(3,3,3);
            Position pos4 = new Position(4,4,4);
            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);
            cont1.addItem(item3, pos3, Color.black);

            cont1.close();

            assertThrows(ContainerException.class, () -> cont1.addItem(item4, pos4, Color.gray));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc5_ecp4_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,2);

            Item item1 = new Item(2,2,2,"item1","");
            Item item2 = new Item(2,2,2,"item2","");

            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(1,1,1);

            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);

            assertFalse(cont1.addItem(item1, pos1, Color.aqua));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc6_ecp5_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,4);

            Item item1 = new Item(5,2,2,"item1","");
            Item item2 = new Item(3,2,1,"item2","");
            Item item3 = new Item(5,3,6,"item3","");

            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(2,2,2);
            Position pos3 = new Position(3,3,3);

            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);

            assertTrue(cont1.addItem(item3, pos3, Color.black));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc7_ecp6_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,4);

            Item item1 = new Item(5,2,2,"item1","");
            Item item2 = new Item(3,2,1,"item2","");
            Item item3 = new Item(5,3,6,"item3","");

            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(2,2,2);
            Position pos3 = new Position(3,3,3);

            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);
            cont1.addItem(item3, pos3, Color.black);

            assertFalse(cont1.addItem(item3, pos3, Color.black));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc8_ecp6_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,4);

            Item item1 = new Item(5,2,2,"item1","");
            Item item2 = new Item(3,2,1,"item2","");
            Item item3 = new Item(5,3,6,"item3","");

            Position pos1 = new Position(1,1,1);
            Position pos2 = new Position(2,2,2);
            Position pos3 = new Position(3,3,3);

            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);
            cont1.close();

            assertThrows(ContainerException.class, () -> cont1.addItem(item3, pos3, Color.black));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc9_bva1_testeAdicionarItem(){
        Container cont1 = new Container("cont1",20,10,10,4);
        assertThrows(ContainerException.class, () -> cont1.addItem(null, null, null));
    }

    @Test
    void tc10_bva2_testeAdicionarItem(){
        Container cont1 = new Container("cont1",20,10,10,4);
        Item item1 = new Item(2,3,4,"item1","");
        assertThrows(ContainerException.class, () -> cont1.addItem(item1, null, null));
    }

    @Test
    void tc11_bva3_testeAdicionarItem(){
        Container cont1 = new Container("cont1",20,10,10,4);
        Item item1 = new Item(2,3,4,"item1","");
        try {
            Position pos1 = new Position(1,1,1);
            assertThrows(ContainerException.class, () -> cont1.addItem(item1, pos1, null));
        } catch (PositionException e) {}
    }

    @Test
    void tc12_bva4_testeAdicionarItem(){
        try {
            Container cont1 = new Container("cont1",20,10,10,4);

            Item item1 = new Item(5,2,2,"item1","");
            Position pos1 = new Position(1,1,1);

            assertTrue(cont1.addItem(item1, pos1, Color.black));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc13_bva5_testeAdicionarItem() {
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);

            Item item1 = new Item(2, 2, 2, "item1", "");
            Item item2 = new Item(2, 2, 2, "item2", "");
            Item item3 = new Item(5, 3, 6, "item3", "");
            Item item4 = new Item(4, 1, 2, "item4", "");
            Position pos1 = new Position(1, 1, 1);
            Position pos2 = new Position(2, 2, 2);
            Position pos3 = new Position(3, 3, 3);
            Position pos4 = new Position(4, 4, 4);
            cont1.addItem(item1, pos1, Color.aqua);
            cont1.addItem(item2, pos2, Color.green);
            cont1.addItem(item3, pos3, Color.black);

            assertTrue(cont1.addItem(item4, pos4, Color.gray));

        } catch (PositionException | ContainerException e) {}
    }

    //------------------------------------------------------------------

    @Test
    void tc14_ecp1_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.addItem(item1, pos1, Color.aqua);

            assertTrue(cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc15_ecp2_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.addItem(item1, pos1, Color.aqua);
            cont1.close();

            assertThrows(ContainerException.class,() -> cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc16_ecp3_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            assertFalse(cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc17_ecp4_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.close();

            assertThrows(ContainerException.class, ()-> cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc18_bva1_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.addItem(item1, pos1, Color.fuchsia);

            assertThrows(ContainerException.class, ()-> cont1.removeItem(null));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc19_bva2_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.addItem(item1, pos1, Color.fuchsia);

            assertTrue(cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    @Test
    void tc20_bva3_testeRemoverItem(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Item item2 = new Item(3, 3, 3, "item2", "");
            Item item3 = new Item(4, 4, 4, "item3", "");
            Position pos1 = new Position(1, 1, 1);
            Position pos2 = new Position(1, 2, 1);
            Position pos3 = new Position(1, 1, 3);

            cont1.addItem(item1, pos1, Color.fuchsia);
            cont1.addItem(item2, pos2, Color.fuchsia);
            cont1.addItem(item3, pos3, Color.fuchsia);

            assertTrue(cont1.removeItem(item1));

        } catch (PositionException | ContainerException e) {}
    }

    //-----------------------------------------------------------

    @Test
    void tc21_ecp1_testeAdicionarContentor(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);
            cont1.addItem(item1, pos1, Color.fuchsia);
            cont1.close();

            Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
            Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

            Customer customer = new Customer("John Doe", add1, add1);

            Person destination = new Person("Jane Doe", add2);

            ShippingOrder ship = new ShippingOrder(customer, destination);
            ship.setStatus(OrderStatus.IN_TREATMENT);

            assertTrue(ship.addContainer(cont1));

        } catch (ContainerException | PositionException | OrderException e) {}
    }

    @Test
    void tc22_ecp2_testeAdicionarContentor(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);
            cont1.addItem(item1, pos1, Color.fuchsia);
            cont1.close();

            Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
            Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

            Customer customer = new Customer("John Doe", add1, add1);

            Person destination = new Person("Jane Doe", add2);

            ShippingOrder ship = new ShippingOrder(customer, destination);

            assertThrows(OrderException.class, ()-> ship.addContainer(cont1));

        } catch (ContainerException | PositionException e) {}
    }

    @Test
    void tc23_ecp2_testeAdicionarContentor(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);
            cont1.addItem(item1, pos1, Color.fuchsia);

            Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
            Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

            Customer customer = new Customer("John Doe", add1, add1);

            Person destination = new Person("Jane Doe", add2);

            ShippingOrder ship = new ShippingOrder(customer, destination);
            ship.setStatus(OrderStatus.IN_TREATMENT);

            assertThrows(ContainerException.class, ()-> ship.addContainer(cont1));

        } catch (ContainerException | PositionException | OrderException e) {}
    }

    @Test
    void tc24_ecp3_testeAdicionarContentor(){
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);
            cont1.addItem(item1, pos1, Color.fuchsia);
            cont1.close();

            Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
            Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

            Customer customer = new Customer("John Doe", add1, add1);

            Person destination = new Person("Jane Doe", add2);

            ShippingOrder ship = new ShippingOrder(customer, destination);
            ship.setStatus(OrderStatus.IN_TREATMENT);

            ship.addContainer(cont1);

            assertFalse(ship.addContainer(cont1));

        } catch (ContainerException | PositionException | OrderException e) {}
    }

    @Test
    void tc25_ecp4_testeAdicionarContentor() {
        try {
            Container cont1 = new Container("cont1", 20, 10, 10, 3);
            Container cont2 = new Container("cont1", 10, 10, 10, 3);

            Item item1 = new Item(2, 2, 2, "item1", "");
            Position pos1 = new Position(1, 1, 1);

            cont1.addItem(item1, pos1, Color.fuchsia);
            cont2.addItem(item1, pos1, Color.maroon);
            cont1.close();

            Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
            Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

            Customer customer = new Customer("John Doe", add1, add1);

            Person destination = new Person("Jane Doe", add2);

            ShippingOrder ship = new ShippingOrder(customer, destination);
            ship.setStatus(OrderStatus.IN_TREATMENT);

            ship.addContainer(cont1);

            assertThrows(ContainerException.class, () -> ship.addContainer(cont2));

        } catch (ContainerException | PositionException | OrderException e) {}
    }

    @Test
    void tc26_bva1_testeAdicionarContentor() {
            try {
                Container cont1 = new Container("cont1", 20, 10, 10, 3);

                Item item1 = new Item(2, 2, 2, "item1", "");
                Position pos1 = new Position(1, 1, 1);

                cont1.addItem(item1, pos1, Color.fuchsia);
                cont1.close();

                Address add1 = new Address("street A1", 1, "city A1", "state A1", "country A1");
                Address add2 = new Address("street A2", 2, "city A2", "state A2", "country A2");

                Customer customer = new Customer("John Doe", add1, add1);

                Person destination = new Person("Jane Doe", add2);

                ShippingOrder ship = new ShippingOrder(customer, destination);
                ship.setStatus(OrderStatus.IN_TREATMENT);

                assertThrows(ContainerException.class, () -> ship.addContainer(null));

            } catch (ContainerException | PositionException | OrderException e) {}
    }

    //--------------------------------------------------------------------
}

